# -*- coding: utf-8 -*-
"""Movie Recommendation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nfoTCBkEgmpg8StIZ2DS5g85dXYqqn4b

inport librar
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""**Import Data**"""

df = pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Movies%20Recommendation.csv')

df.head()

df.info()

df.shape

df.columns

"""**Get Feature Selection**"""

df_features = df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

"""Selectd five existing features to remcommend moives.It may very from one project to another.Like one can add vote  counts,budgets language etc."""

df_features.shape

df_features

"""x = df_features['Movie_Genre'] + ' ' + df_features['Movie_Keywords'] + ' ' + df_features['Movie_Tagline'] + ' ' + df_features['Movie_Cast'] + ' ' + df_features['Movie_Director']"""

X = df_features['Movie_Genre'] + ' ' + df_features['Movie_Keywords'] + ' ' + df_features['Movie_Tagline'] + ' ' + df_features['Movie_Cast'] + ' ' + df_features['Movie_Director']

X

X.shape

"""**Get Feature Text conversion to Tokens**"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf= TfidfVectorizer()

X= tfidf.fit_transform(X)

X.shape

print(X)

"""**Get Similarity Score using Cosine Similarity**

cosine_similaity computes the L2 normalized dont vectors.Eucildean(L2)  normallzation project the vectors onto the unit shapere.and their dont products is then cosise of the angle between the points donoted by the vectors.
"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score =cosine_similarity(X)

Similarity_Score

Similarity_Score.shape

"""**Get Movie Nqme as Input from User and Validate for closest Spelling**"""

Favorite_moive_Name = input(' Enter your favourite moive name:')

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib

Movie_Recommendation = difflib.get_close_matches(Favorite_moive_Name,All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Moive = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Moive)

#getting a list of similar moives
Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Close_Match_Moive]))
print(Recommendation_Score)

len(Recommendation_Score)

"""**Get All Movies Sort Based on Recommmendation Score wrt Favourite Movie**"""

#sorting the movies based on their similarity score
Sorted_Similar_Movie = sorted(Recommendation_Score, key = lambda X:X[1],reverse=True)
print(Sorted_Similar_Movie)

Movie_Title = 'Movie_Title'

#print the name of similar movies based on the index

print('Top 30 Movie Suggested for you : \n')

i = 1

for movie in Sorted_Similar_Movie:
  index = movie[0]
  title_from_index = df[df.index==index][Movie_Title].values[0]
  if (i<31):
    print(i,'.',title_from_index)
    i+=1

"""**TOP 10 Moive Recmmendation System**"""

list_of_all_titles = df['Movie_Title'].tolist()

Movie_Name = input(' Enter your favourite movie name :')
list_of_all_titles = df['Movie_Title'].tolist()
Find_close_match = difflib.get_close_matches(Movie_Name,list_of_all_titles)
close_Match = Find_close_match[0]
Index_of_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
Recommendation_score =list(enumerate(Similarity_Score[Index_of_Movie]))
Stored_Similar_movie = sorted(Recommendation_score,key= lambda x:x[1],reverse=True)
print('Top 10 moives suggested for you : /n')
i=1
for movie in Sorted_Similar_Movie:
  index = movie[0]
  title_from_index = df[df.index==index][Movie_Title].values[0]
  if (i<31):
    print(i,'.',title_from_index)
    i+=1